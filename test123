using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.XPath;

namespace Insure.Tests
{
    class InsuranceValidations
    {
        Dictionary<string, string> QTrueFalse;


     
        [TestCaseSource("ExcelData")]
        public void MainTest(string C1, string C2, string C3, string C4, string C5, string C6, string C7, string C8, string C9, string C10, string C11, string C12, string C13, string C14, string C15, string C16, string C17, string C18, string C19, string C20, string C21, string C22, string C23, string C24, string C25, string C26, string C27, string C28, string C29, string C30, string C31, string C32, string C33, string C34, string C35, string C36, string C37, string C38, string C39, string C40, string C41, string C42, string C43, string C44, string C45, string C46, string C47, string C48, string C49, string C50, string C51, string C52, string C53, string C54)
        {
            SetMappings();

            Console.WriteLine("C1 = " + C1);
            Console.WriteLine("C2 = " + C2);
            Console.WriteLine("C3 = " + C3);
            Console.WriteLine("C4 = " + C4);
            Console.WriteLine("C5 = " + C5);
            Console.WriteLine("C6 = " + C6);
            Console.WriteLine("C7 = " + C7);
            Console.WriteLine("C8 = " + C8);
            Console.WriteLine("C9 = " + C9);
            Console.WriteLine("C10 = " + C10);
            Console.WriteLine("C11 = " + C11);
            Console.WriteLine("C12 = " + C12);
            Console.WriteLine("C13 = " + C13);
            Console.WriteLine("C14 = " + C14);
            Console.WriteLine("C15 = " + C15);
            Console.WriteLine("C16 = " + C16);
            Console.WriteLine("C17 = " + C17);
            Console.WriteLine("C18 = " + C18);
            Console.WriteLine("C19 = " + C19);
            Console.WriteLine("C20 = " + C20);
            Console.WriteLine("C21 = " + C21);
            Console.WriteLine("C22 = " + C22);
            Console.WriteLine("C23 = " + C23);
            Console.WriteLine("C24 = " + C24);
            Console.WriteLine("C25 = " + C25);
            Console.WriteLine("C26 = " + C26);
            Console.WriteLine("C27 = " + C27);
            Console.WriteLine("C28 = " + C28);
            Console.WriteLine("C29 = " + C29);
            Console.WriteLine("C30 = " + C30);
            Console.WriteLine("C31 = " + C31);
            Console.WriteLine("C32 = " + C32);
            Console.WriteLine("C33 = " + C33);
            Console.WriteLine("C34 = " + C34);
            Console.WriteLine("C35 = " + C35);
            Console.WriteLine("C36 = " + C36);
            Console.WriteLine("C37 = " + C37);
            Console.WriteLine("C38 = " + C38);
            Console.WriteLine("C39 = " + C39);
            Console.WriteLine("C40 = " + C40);
            Console.WriteLine("C41 = " + C41);
            Console.WriteLine("C42 = " + C42);
            Console.WriteLine("C43 = " + C43);
            Console.WriteLine("C44 = " + C44);
            Console.WriteLine("C45 = " + C45);
            Console.WriteLine("C46 = " + C46);
            Console.WriteLine("C47 = " + C47);
            Console.WriteLine("C48 = " + C48);
            Console.WriteLine("C49 = " + C49);
            Console.WriteLine("C50 = " + C50);
            Console.WriteLine("C51 = " + C51);
            Console.WriteLine("C52 = " + C52);
            Console.WriteLine("C53 = " + C53);
            Console.WriteLine("C54 = " + C54);

            //******************************************
            WebRequest req = WebRequest.Create("https://xxonline-medical-stg-ws.al.intraxa/dms-cst-ruleengine-v1/RuleEngineServices.svc");
            HttpWebRequest httpreq = (HttpWebRequest)req;
            httpreq.Method = "POST";
            httpreq.ContentType = "text/xml;charset=UTF-8";
            httpreq.Headers.Add("SOAPAction:http://xxservices.axa.fr/Dms/RuleEngine/CST/1/RuleEngine/GetRuleEngineResponse");
            httpreq.ProtocolVersion = HttpVersion.Version11;
            // httpreq.Credentials = CredentialCache.DefaultCredentials;
            httpreq.Host = "online-medical-stg-ws.al.intraxa";
            httpreq.Headers.Add("Authorization", "Basic V1NfVVNFUjpXc1UwMURtc1dlYnNlcnZpY2Uh");





            Stream str = httpreq.GetRequestStream();
            StreamWriter strwriter = new StreamWriter(str, Encoding.ASCII);
            StringBuilder soaprequest = new StringBuilder();

            //----------
            soaprequest.Append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://services.axa.fr/Dms/RuleEngine/CST/1\" xmlns:af=\"http://schemas.datacontract.org/2004/07/AF.DMS.WS.RuleEngine.CST.Models\" xmlns:af1=\"http://schemas.datacontract.org/2004/07/AF.DMS.BP.Rules.Models\" xmlns:af2=\"http://schemas.datacontract.org/2004/07/AF.DMS.BP.Questionnaires.Models\" xmlns:af3=\"http://schemas.datacontract.org/2004/07/AF.DMS.BP.Questionnaires.Models.Groups\" xmlns:af4=\"http://schemas.datacontract.org/2004/07/AF.DMS.BP.Questionnaires.Models.TypeQuestions\" xmlns:arr=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\" xmlns:af5=\"http://schemas.datacontract.org/2004/07/AF.DMS.DAL.Models.Medical\" xmlns:af6=\"http://schemas.datacontract.org/2004/07/AF.DMS.WS.RuleEngine.CST.Models.Contract\">");
            soaprequest.Append("<soapenv:Header/>");
            soaprequest.Append("<soapenv:Body>");
            soaprequest.Append("<ns:GetRuleEngineResponse>");
            soaprequest.Append("<ns:request>");
            soaprequest.Append("<af6:HealthBook>");
            soaprequest.Append("<af:Amount>25000</af:Amount>");
            soaprequest.Append("<af:Answers>");
            soaprequest.Append("<af:GroupDGH>");
            soaprequest.Append("<af3:DeclarationOfGoodHealth>");
            soaprequest.Append("<af4:IsTrue>true</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationOfGoodHealth>");
            soaprequest.Append("</af:GroupDGH>");
            soaprequest.Append("<af:GroupDeseaseSick>");
            soaprequest.Append("<af3:DeclarationCompensation>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationCompensation>");
            soaprequest.Append("<af3:DeclarationDisability>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationDisability>");
            soaprequest.Append("<af3:DeclarationSocialSecurityCover>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationSocialSecurityCover>");
            soaprequest.Append("<af3:DeclarationWorkStoppage>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationWorkStoppage>");
            soaprequest.Append("</af:GroupDeseaseSick>");
            soaprequest.Append("<af:GroupFamilyHistory>");
            soaprequest.Append("<af3:DeclarationFamilyHistory>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationFamilyHistory>");
            soaprequest.Append("<af3:FamilyHistory/>");
            soaprequest.Append("</af:GroupFamilyHistory>");
            soaprequest.Append("<af:GroupHospitalizations>");
            soaprequest.Append("<af3:DeclarationHospitalizations>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationHospitalizations>");
            soaprequest.Append("<af3:DeclarationHospitalizationsFutur>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationHospitalizationsFutur>");
            soaprequest.Append("<af3:Hospitalizations/>");
            soaprequest.Append("<af3:HospitalizationsFutur/>");
            soaprequest.Append("</af:GroupHospitalizations>");
            soaprequest.Append("<!--Début Groupe à variabiliser qd la typo = Pathologie :-->");
            soaprequest.Append("<af:GroupPathologies>");
            soaprequest.Append("<af3:DeclarationPathologies>");
            soaprequest.Append("<af4:IsTrue>true</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationPathologies>");
            soaprequest.Append("<af3:Pathologies>");
            soaprequest.Append("<af4:PathologyQuestionType>");
            //Questions >> C17, C20, C23, C26
            soaprequest.Append("<af4:AdditionnalQuestions>");
            //answers

            if(C17 != "")
            {soaprequest.Append(GetAnswerNode(C17, QTrueFalse[C16]));}

            if (C20 != "")
            { soaprequest.Append(GetAnswerNode(C20, QTrueFalse[C19])); }

            if (C23 != "")
            { soaprequest.Append(GetAnswerNode(C23, QTrueFalse[C22])); }

            if (C26 != "")
            { soaprequest.Append(GetAnswerNode(C26, QTrueFalse[C25])); }



            soaprequest.Append("</af4:AdditionnalQuestions>");
           
            //C9
            soaprequest.Append("<af4:Title>"+C9+"</af4:Title>");
           
            soaprequest.Append("</af4:PathologyQuestionType>");
            soaprequest.Append("</af3:Pathologies>");
            soaprequest.Append("</af:GroupPathologies>");
            soaprequest.Append("<!--Fin Groupe à variabiliser qd la typo = Pathologie :-->");
            soaprequest.Append("<af:GroupSMQ>");
            soaprequest.Append("<af3:Answers>");
            soaprequest.Append("<af4:BooleanAnswer>");
            soaprequest.Append("<af4:IsTrue>true</af4:IsTrue>");
            soaprequest.Append("</af4:BooleanAnswer>");
            soaprequest.Append("</af3:Answers>");
            soaprequest.Append("</af:GroupSMQ>");
            soaprequest.Append("<af:GroupTreatments>");
            soaprequest.Append("<af3:DeclarationTreatments>");
            soaprequest.Append("<af4:IsTrue>false</af4:IsTrue>");
            soaprequest.Append("</af3:DeclarationTreatments>");
            soaprequest.Append("<af3:Treatments/>");
            soaprequest.Append("</af:GroupTreatments>");
            soaprequest.Append("<af:GroupWeightAndPound>");
            soaprequest.Append("<af3:HeightNumber>170</af3:HeightNumber>");
            soaprequest.Append("<af3:HeightUnit>CM</af3:HeightUnit>");
            soaprequest.Append("<af3:WeightNumber>70</af3:WeightNumber>");
            soaprequest.Append("<af3:WeightUnit>KG</af3:WeightUnit>");
            soaprequest.Append("</af:GroupWeightAndPound>");
            soaprequest.Append("</af:Answers>");
            soaprequest.Append("<af:ApplicantWarranties>");
            soaprequest.Append("<!--Zero or more repetitions: à confirmer-->");
            soaprequest.Append("<af:Code>1</af:Code>");
            soaprequest.Append("<af:Code>2</af:Code>");
            soaprequest.Append("<af:Code>3</af:Code>");
            soaprequest.Append("<af:Code>4</af:Code>");
            soaprequest.Append("<af:Code>10</af:Code>");
            soaprequest.Append("<af:Code>5</af:Code>");
            soaprequest.Append("<af:Code>21</af:Code>");
            soaprequest.Append("<af:Code>20</af:Code>");
            soaprequest.Append("<af:Code>6</af:Code>");
            soaprequest.Append("</af:ApplicantWarranties>");
            soaprequest.Append("<af:HasDominantCriterion>false</af:HasDominantCriterion>");
            soaprequest.Append("<af:HasRiskNationality>false</af:HasRiskNationality>");
            soaprequest.Append("<af:HasRiskPlayingSport>false</af:HasRiskPlayingSport>");
            soaprequest.Append("<af:HasRiskProfession>false</af:HasRiskProfession>");
            soaprequest.Append("<af:RiskLevel>0</af:RiskLevel>");
            soaprequest.Append("</af6:HealthBook>");
            soaprequest.Append("<af6:PartnerCode>MMB</af6:PartnerCode>");
            soaprequest.Append("</ns:request>");
            soaprequest.Append("</ns:GetRuleEngineResponse>");
            soaprequest.Append("</soapenv:Body>");
            soaprequest.Append("</soapenv:Envelope>");

            Console.WriteLine("Request>>" + soaprequest.ToString() + "<<<");

            strwriter.Write(soaprequest.ToString());
            strwriter.Close();

            //************************ to do *********************
            HttpWebResponse res = (HttpWebResponse)httpreq.GetResponse();
            StreamReader rdr = new StreamReader(res.GetResponseStream());
            string result = rdr.ReadToEnd();
            Console.WriteLine(result);

            Console.WriteLine("++++" + res.StatusCode);
            Console.WriteLine("++++" + res.Headers);

            File.WriteAllText("C:/temp/a.xml", result.ToString());

            var document = new XmlDocument();
            document.Load("C:/temp/a.xml");

            var nsmgr = new XmlNamespaceManager(document.NameTable);
            nsmgr.AddNamespace("m", "http://www.dataaccess.com/webservicesserver/");

            var nl = document.SelectSingleNode("//m:NumberToDollarsResult", nsmgr);
            Console.WriteLine(nl.InnerText);
          //  Assert.AreEqual(noOfDollarsWords, nl.InnerText);

        }



        private static string FILENAME = "Data.xlsx";
        public static IEnumerable<TestCaseData> ExcelData()
        {
            return ExcelReader.ReadFromExcel(FILENAME, "Sheet1");
        }


        public string GetAnswerNode(string text, string isTrue)
        {
            return "<af4:BooleanAnswer>\r\n" +
            "<af4:Text>"+text+"</af4:Text>\r\n" +
            "<af4:IsTrue>"+isTrue+"</af4:IsTrue>\r\n" +
            "</af4:BooleanAnswer>\r\n";
        }


        public void SetMappings()
        {
           QTrueFalse = new Dictionary<string, string>();

            QTrueFalse.Add("oui", "true");
            QTrueFalse.Add("non", "false");
            //QTrueFalse["oui"]

        }


    }
}
*************************************
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace Insure.Tests
{
    public class ExcelReader
    {
        public static IEnumerable<TestCaseData> ReadFromExcel(string excelFileName, string excelsheetTabName)
        {
            string executableLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            string xslLocation = Path.Combine(executableLocation, "Data/" + excelFileName);


            string cmdText = "SELECT * FROM [" + excelsheetTabName + "$]";

            if (!File.Exists(xslLocation))
                throw new Exception(string.Format("File name: {0}", xslLocation), new FileNotFoundException());

            string connectionStr = string.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0 Xml;HDR=YES\";", xslLocation);

            var testCases = new List<TestCaseData>();
            using (var connection = new OleDbConnection(connectionStr))
            {
                connection.Open();
                var command = new OleDbCommand(cmdText, connection);
                var reader = command.ExecuteReader();
                if (reader == null)
                    throw new Exception(string.Format("No data return from file, file name:{0}", xslLocation));
                int j = 1; // manipulate header
                while (reader.Read())
                {
                    var row = new List<string>();
                    var feildCnt = reader.FieldCount;
                    for (var i = 0; i < feildCnt; i++)
                        row.Add(reader.GetValue(i).ToString());
                    if (j >= 2)
                    {
                        testCases.Add(new TestCaseData(row.ToArray()));
                    }
                    j++;
                }
            }

            if (testCases != null)
                foreach (TestCaseData testCaseData in testCases)
                    yield return testCaseData;
        }
    }
}

*****************
